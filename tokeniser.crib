public enum Token(tkIdentifier, tkIntConstant, tkBoolConstant, tkDoubleConstant, tkStringConstant, tkClass, tkFunction, tkReturn, 
    tkLeftParen, tkRightParen, tkSemiColon, tkComma, tkLeftBracket, tkRightBracket, tkCaret,
    tkEquals, tkDot, tkOptDot, tkRangeExclusive, tkRangeInclusive, tkAmpersand, tkColon, tkAssign,
    tkAnd, tkOr, tkConst, tkVar, tkElse, tkElseif, tkEnd, tkInt, tkDouble, tkBool, tkString,
    tkImport, tkFrom,
    tkEnum, tkIf, tkWhile, tkRepeat, tkUntil, tkIn, tkFor, tkNil, tkPublic, tkNot, tkQuestionMark, tkBang,
    tkPlus, tkMinus, tkTimes, tkSlash, tkNotEquals, tkLessThanEquals, tkLessThan, tkGreaterThan, tkGreaterThanEquals,
    tkLeftBrace, tkRightBrace,
    tkEOF, tkInvalid)

function isWhitespace(ch: int): bool
    if ch = 32 or ch = 13 or ch = 10 or ch = 9
        return true
    end
    return false
end

function isLeadingIdentifier(ch: int): bool
    return ch >= 65 and ch <= 90 or ch >= 97 and ch <= 122 or ch = 95
end

function isTrailingIdentifier(ch: int): bool
    return ch >= 48 and ch <= 57 or ch >= 65 and ch <= 90 or ch >= 97 and ch <= 122 or ch = 95
end

function isDigit(ch: int) : bool
    return ch >= 48 and ch <= 57
end

public class Tokeniser(text: string^)
    const length := text.length
    var pos := 0
    var tokenStart := 0
    var hasPutback := false
    var lastToken: Token?
    public var line := 1
    var lineStart := 1

    public function nextToken(): Token
        if hasPutback
            hasPutback := false
            return lastToken!
        end
        lastToken := parseNextToken()
        return lastToken
    end

    public function putback()
        hasPutback := true
    end

    public function value():string
        return text[tokenStart..<pos]
    end

    public function start(): int
        return tokenStart - lineStart
    end

    public function tokenLength(): int
        return pos - tokenStart
    end

    function parseNextToken(): Token
        var ident: string?
    
        while pos < length and isWhitespace(ch: text[pos])
            if text[pos] = 10
                line := line + 1
                lineStart := pos + 1
            end
            pos := pos + 1
        end

        if pos = length
            return tkEOF
        end

        tokenStart := pos
        var ch := text[pos]
        pos := pos + 1

        if isLeadingIdentifier(ch: ch)
            while pos < length and isTrailingIdentifier(ch: text[pos])
                pos := pos + 1
            end

            ident := text[tokenStart..<pos]

            if ident = "const"
                return tkConst
            elseif ident = "function"
                return tkFunction
            elseif ident = "and"
                return tkAnd
            elseif ident = "or"
                return tkOr
            elseif ident = "else"
                return tkElse
            elseif ident = "elseif"
                return tkElseif
            elseif ident = "end"
                return tkEnd
            elseif ident = "bool"
                return tkBool
            elseif ident = "string"
                return tkString
            elseif ident = "double"
                return tkDouble
            elseif ident = "int"
                return tkInt
            elseif ident = "enum"
                return tkEnum
            elseif ident = "class"
                return tkClass
            elseif ident = "if"
                return tkIf
            elseif ident = "return"
                return tkReturn
            elseif ident = "while"
                return tkWhile
            elseif ident = "repeat"
                return tkRepeat
            elseif ident = "until"
                return tkUntil
            elseif ident = "in"
                return tkIn
            elseif ident = "for"
                return tkFor
            elseif ident = "nil"
                return tkNil
            elseif ident = "not"
                return tkNot
            elseif ident = "import"
                return tkImport
            elseif ident = "from"
                return tkFrom
            elseif ident = "true" or ident = "false"
                return tkBoolConstant
            elseif ident = "public"
                return tkPublic
            end

            return tkIdentifier
        end

        if isDigit(ch: ch)
            while pos < length and isDigit(ch: text[pos])
                pos := pos + 1
            end
            return tkIntConstant
        end

        if ch = 39 or ch = 34
            while pos < length and text[pos] <> ch
                pos := pos + 1
            end
            if pos < length
                pos := pos + 1
            end
            return tkStringConstant
        end

        var match:Token := tkInvalid
        if ch = 40
            match := tkLeftParen
        elseif ch = 41
            match := tkRightParen
        elseif ch = 33
            match := tkBang
        elseif ch = 59
            match := tkSemiColon
        elseif ch = 44
            match := tkComma
        elseif ch = 91
            match := tkLeftBracket
        elseif ch = 93
            match := tkRightBracket
        elseif ch = 61
            match := tkEquals
        elseif ch = 123
            match := tkLeftBrace
        elseif ch = 125
            match := tkRightBrace
        elseif ch = 38
            match := tkAmpersand
        elseif ch = 46
            if pos < length and text[pos] = 46
                pos := pos + 1
                if pos < length and text[pos] = 60
                    pos := pos + 1
                    match := tkRangeExclusive
                else
                    match := tkRangeInclusive
                end
            else
                match := tkDot
            end
        elseif ch = 58
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := tkAssign
            else
                match := tkColon
            end
        elseif ch = 63
            if pos < length and text[pos] = 46
                pos := pos + 1
                match := tkOptDot
            else
                match := tkQuestionMark
            end
        elseif ch = 43
            match := tkPlus
        elseif ch = 45
            match := tkMinus
        elseif ch = 42
            match := tkTimes
        elseif ch = 94
            match := tkCaret
        elseif ch = 47
            match := tkSlash
        elseif ch = 60
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := tkLessThanEquals
            elseif pos < length and text[pos] = 62
                pos := pos + 1
                match := tkNotEquals
            else
                match := tkLessThan
            end
        elseif ch = 62
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := tkGreaterThanEquals
            else
                match := tkGreaterThan
            end
        end

        return match
    end
end
