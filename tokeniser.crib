public enum Token(tkIdentifier, tkIntConstant, tkBoolConstant, tkDoubleConstant, tkStringConstant, tkClass, tkFunction, tkReturn, 
    tkLeftParen, tkRightParen, tkSemiColon, tkComma, tkLeftBracket, tkRightBracket, tkCaret,
    tkEquals, tkDot, tkOptDot, tkRangeExclusive, tkRangeInclusive, tkAmpersand, tkColon, tkAssign,
    tkAnd, tkOr, tkConst, tkLet, tkElse, tkElseif, tkEnd, tkInt, tkDouble, tkBool, tkString,
    tkImport, tkFrom,
    tkEnum, tkIf, tkWhile, tkRepeat, tkUntil, tkOf, tkFor, tkNil, tkPublic, tkNot, tkQuestionMark, tkBang,
    tkPlus, tkMinus, tkTimes, tkSlash, tkNotEquals, tkLessThanEquals, tkLessThan, tkGreaterThan, tkGreaterThanEquals,
    tkLeftBrace, tkRightBrace,
    tkEOF, tkInvalid)

function isWhitespace(ch: int): bool
    if ch = 32 or ch = 13 or ch = 10 or ch = 9
        return true
    end
    return false
end

function isLeadingIdentifier(ch: int): bool
    return ch >= 65 and ch <= 90 or ch >= 97 and ch <= 122 or ch = 95
end

function isTrailingIdentifier(ch: int): bool
    return ch >= 48 and ch <= 57 or ch >= 65 and ch <= 90 or ch >= 97 and ch <= 122 or ch = 95
end

function isDigit(ch: int) : bool
    return ch >= 48 and ch <= 57
end

public class Tokeniser(text: string^)
    const length := text.length
    let pos := 0
    let tokenStart := 0
    let hasPutback := false
    let lastToken: Token?
    public let line := 1

    public function nextToken(): Token
        if hasPutback
            hasPutback := false
            return lastToken!
        end
        lastToken := parseNextToken()
        return lastToken
    end

    public function putback()
        hasPutback := true
    end

    public function value():string
        return text[tokenStart..<pos]
    end

    public function start(): int
        return tokenStart
    end

    public function tokenLength(): int
        return pos - tokenStart
    end

    function parseNextToken(): Token
        let ident: string?
    
        while pos < length and isWhitespace(ch: text[pos])
            if text[pos] = 10
                line := line + 1
            end
            pos := pos + 1
        end

        if pos = length
            return Token.tkEOF
        end

        tokenStart := pos
        let ch := text[pos]
        pos := pos + 1

        if isLeadingIdentifier(ch: ch)
            while pos < length and isTrailingIdentifier(ch: text[pos])
                pos := pos + 1
            end

            ident := text[tokenStart..<pos]

            if ident = "let"
                return Token.tkLet
            elseif ident = "const"
                return Token.tkConst
            elseif ident = "function"
                return Token.tkFunction
            elseif ident = "and"
                return Token.tkAnd
            elseif ident = "or"
                return Token.tkOr
            elseif ident = "else"
                return Token.tkElse
            elseif ident = "elseif"
                return Token.tkElseif
            elseif ident = "end"
                return Token.tkEnd
            elseif ident = "bool"
                return Token.tkBool
            elseif ident = "string"
                return Token.tkString
            elseif ident = "double"
                return Token.tkDouble
            elseif ident = "int"
                return Token.tkInt
            elseif ident = "enum"
                return Token.tkEnum
            elseif ident = "class"
                return Token.tkClass
            elseif ident = "if"
                return Token.tkIf
            elseif ident = "return"
                return Token.tkReturn
            elseif ident = "while"
                return Token.tkWhile
            elseif ident = "repeat"
                return Token.tkRepeat
            elseif ident = "until"
                return Token.tkUntil
            elseif ident = "of"
                return Token.tkOf
            elseif ident = "for"
                return Token.tkFor
            elseif ident = "nil"
                return Token.tkNil
            elseif ident = "not"
                return Token.tkNot
            elseif ident = "import"
                return Token.tkImport
            elseif ident = "from"
                return Token.tkFrom
            elseif ident = "true" or ident = "false"
                return Token.tkBoolConstant
            elseif ident = "public"
                return Token.tkPublic
            end

            return Token.tkIdentifier
        end

        if isDigit(ch: ch)
            while pos < length and isDigit(ch: text[pos])
                pos := pos + 1
            end
            return Token.tkIntConstant
        end

        if ch = 39 or ch = 34
            while pos < length and text[pos] <> ch
                pos := pos + 1
            end
            if pos < length
                pos := pos + 1
            end
            return Token.tkStringConstant
        end

        let match := Token.tkInvalid
        if ch = 40
            match := Token.tkLeftParen
        elseif ch = 41
            match := Token.tkRightParen
        elseif ch = 33
            match := Token.tkBang
        elseif ch = 59
            match := Token.tkSemiColon
        elseif ch = 44
            match := Token.tkComma
        elseif ch = 91
            match := Token.tkLeftBracket
        elseif ch = 93
            match := Token.tkRightBracket
        elseif ch = 61
            match := Token.tkEquals
        elseif ch = 123
            match := Token.tkLeftBrace
        elseif ch = 125
            match := Token.tkRightBrace
        elseif ch = 38
            match := Token.tkAmpersand
        elseif ch = 46
            if pos < length and text[pos] = 46
                pos := pos + 1
                if pos < length and text[pos] = 60
                    pos := pos + 1
                    match := Token.tkRangeExclusive
                else
                    match := Token.tkRangeInclusive
                end
            else
                match := Token.tkDot
            end
        elseif ch = 58
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := Token.tkAssign
            else
                match := Token.tkColon
            end
        elseif ch = 63
            if pos < length and text[pos] = 46
                pos := pos + 1
                match := Token.tkOptDot
            else
                match := Token.tkQuestionMark
            end
        elseif ch = 43
            match := Token.tkPlus
        elseif ch = 45
            match := Token.tkMinus
        elseif ch = 42
            match := Token.tkTimes
        elseif ch = 94
            match := Token.tkCaret
        elseif ch = 47
            match := Token.tkSlash
        elseif ch = 60
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := Token.tkLessThanEquals
            elseif pos < length and text[pos] = 62
                pos := pos + 1
                match := Token.tkNotEquals
            else
                match := Token.tkLessThan
            end
        elseif ch = 62
            if pos < length and text[pos] = 61
                pos := pos + 1
                match := Token.tkGreaterThanEquals
            else
                match := Token.tkGreaterThan
            end
        end

        return match
    end
end
