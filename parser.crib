import Token, Tokeniser from "./tokeniser"
import IdentifierOrigin from "./infer"

public enum StatementKind(ConstStatement, LetStatement, EnumStatement, ClassStatement, FunctionStatement,
    ReturnStatement, IfStatement, WhileStatement, ImportStatement, AssignStatement, ExpressionStatement, RepeatStatement, ForStatement, ForRangeStatement, ForRangeExclusiveStatement, ModuleStatement)

public enum ExpressionKind(IntConstant, DoubleConstant, StringConstant, NilConstant, ArrayConstant, Identifier, Multiply, Divide, Modulo, Add, Subtract,
    LessThan, LessThanEquals, Equals, NotEquals, GreaterThan, GreaterThanEquals, And, Or, OptDot, Dot, Bang, Invoke, Index, IntrinsicType, Slice, BoolConstant, Not, Negate,
    Invalid)

public enum TypeKind(intType, doubleType, boolType, stringType, objectType, arrayType, mapType, nullableType, pointerType, classType, enumType, enumDefinitionType, functionType, voidType, arrayInitType, closureType, unknownType, invalidType)

const sharedUnknownType := ParsedType(kind: unknownType)

public class Expression(public kind: ExpressionKind, public left: Expression? := nil, public right: Expression? := nil, tokeniser: Tokeniser? := nil)
    public var value: string?
    public var indexes: Expression[]
    public var identifiers: string[]
    public var type: ParsedType := sharedUnknownType
    public var line := 0
    public var tokenPos := 0
    public var tokenLength := 0
    public var origin: IdentifierOrigin?

    if tokeniser <> nil
        line := tokeniser.line
        tokenPos := tokeniser.start()
        tokenLength := tokeniser.tokenLength()
    end
end

public class ParsedType(public kind: TypeKind, public ref: ParsedType? := nil, public stmt: Statement? := nil)
    public var identifier: string?
    public var mapKeyRef: ParsedType?
end

public class DefnArgument(public identifier: string, public type: ParsedType, public isPublic: bool)
    public var value: Expression?
end

public class ElseIfClause(public value: Expression, public block: Statement[]) end

public class Statement(public kind: StatementKind)
    public var identifier: string?
    public var type: ParsedType := sharedUnknownType
    public var value: Expression?
    public var lhs: Expression?
    public var block: Statement[]
    public var elseIf: ElseIfClause[]
    public var elseBlock: Statement[]
    public var identifierList: string[]
    public var defnArguments: DefnArgument[]
    public var isPublic: bool
    public var async: bool
    public var referencedBy: bool[Statement]
end

public class World
    public const allCode: Statement[]
end

class Parser(tokeniser: Tokeniser, world: World)
    function acceptToken(token: Token): bool
        const tk := tokeniser.nextToken()
        if tk = token
            return true
        end
        tokeniser.putback()
        return false
    end

    function acceptIdentifierToken(token: Token, text: string): bool
        const tk := tokeniser.nextToken()
        if tk = tkIdentifier and tokeniser.value() = text
            return true
        end
        tokeniser.putback()
        return false
    end

    function expectToken(expected: Token): string
        const tk := tokeniser.nextToken()
        if tk <> expected
            panic(message: "expected " + tokeniser.line)
        end
        return tokeniser.value()
    end

    function expectIdentifier: string
        return expectToken(expected: tkIdentifier)
    end

    function parseType: ParsedType
        var reference := false
        const tk := tokeniser.nextToken()
        var type: ParsedType := sharedUnknownType
        const identifier := tokeniser.value()

        if tk = tkInt
            type := ParsedType(kind: intType)
        elseif tk = tkBool
            type := ParsedType(kind: boolType)
        elseif tk = tkString
            type := ParsedType(kind: stringType)
        elseif tk = tkIdentifier
            type := ParsedType(kind: objectType)
            type.identifier := identifier
        end
        while true
            if acceptToken(token: tkLeftBracket)
                if acceptToken(token: tkRightBracket)
                    type := ParsedType(kind: arrayType, ref: type)
                else
                    type := ParsedType(kind: mapType, ref: type)
                    type.mapKeyRef := parseType()
                    expectToken(expected: tkRightBracket)
                end
            elseif acceptToken(token: tkCaret)
                type := ParsedType(kind: pointerType, ref: type)
            elseif acceptToken(token: tkQuestionMark)
                type := ParsedType(kind: nullableType, ref: type)
            else
                return type
            end
        end
        return type
    end

    function parseStatement:Statement?
        var stmt: Statement?
        var identifier: string?
        var type: ParsedType := sharedUnknownType
        var value: Expression?
        var block: Statement[]
        var isPublic := false

        var tk := tokeniser.nextToken()

        if tk = tkElse or tk = tkElseif or tk = tkEnd or tk = tkUntil or tk = tkEOF
            tokeniser.putback()
            return nil
        end

        if tk = tkPublic
            isPublic := true
            tk := tokeniser.nextToken()
        end

        if tk = tkIdentifier
            identifier := tokeniser.value()
            if identifier = "var"
                tk := tkVar
            end
        end

        if tk = tkConst or tk = tkVar
            identifier := expectIdentifier()
            if acceptToken(token: tkColon)
                type := parseType()
            end

            if acceptToken(token: tkAssign)
                value := parseExpression()
            else
                value := nil
            end

            if tk = tkConst
                stmt := Statement(kind: ConstStatement)
            else
                stmt := Statement(kind: LetStatement)
            end
            stmt.value := value
            stmt.identifier := identifier
            stmt.type := type
            stmt.isPublic := isPublic

            return stmt
        elseif tk = tkEnum
            stmt := Statement(kind: EnumStatement)
            stmt.identifier := expectIdentifier()
            stmt.isPublic := isPublic
            expectToken(expected: tkLeftParen)

            stmt.identifierList.push(value: expectIdentifier())
            while acceptToken(token: tkComma)
                stmt.identifierList.push(value: expectIdentifier())
            end
            expectToken(expected: tkRightParen)

            return stmt
        elseif tk = tkClass
            stmt := Statement(kind: StatementKind.ClassStatement)
            stmt.identifier := expectIdentifier()

            if acceptToken(token: tkLeftParen)
                stmt.defnArguments := parseDefnArguments()
            end

            stmt.block := parseBlock()
            expectToken(expected: tkEnd)
            stmt.isPublic := isPublic

            world.allCode.push(value: stmt)

            return stmt
        elseif tk = tkFunction
            stmt := Statement(kind: StatementKind.FunctionStatement)
            stmt.identifier := expectIdentifier()

            if acceptToken(token: tkLeftParen)
                stmt.defnArguments := parseDefnArguments()
            end
            if acceptToken(token: tkColon)
                type := parseType()
            else
                type := ParsedType(kind: voidType)
            end

            stmt.block := parseBlock()
            expectToken(expected: tkEnd)
            stmt.isPublic := isPublic
            stmt.type := type

            world.allCode.push(value: stmt)

            return stmt
        elseif tk = tkReturn
            stmt := Statement(kind: ReturnStatement)
            stmt.value := parseExpression()
            return stmt
        elseif tk = tkIf
            stmt := Statement(kind: IfStatement)

            stmt.value := parseExpression()
            stmt.block := parseBlock()
            while acceptToken(token: tkElseif)
                stmt.elseIf.push(value: ElseIfClause(value: parseExpression(), block: parseBlock()))
            end
            if acceptToken(token: tkElse)
                stmt.elseBlock := parseBlock()
            end
            expectToken(expected: tkEnd)

            return stmt
        elseif tk = tkWhile
            stmt := Statement(kind: WhileStatement)
            stmt.value := parseExpression()
            stmt.block := parseBlock()
            expectToken(expected: tkEnd)

            return stmt
        elseif tk = tkRepeat
            stmt := Statement(kind: RepeatStatement)
            stmt.block := parseBlock()
            expectToken(expected: tkUntil)
            stmt.value := parseExpression()

            return stmt
        elseif tk = tkFor
            stmt:= Statement(kind: StatementKind.ForStatement)
            stmt.identifier := expectIdentifier()
            expectToken(expected: tkIn)
            stmt.value := parseExpression()

            if acceptToken(token: tkRangeInclusive)
                stmt.lhs := stmt.value
                stmt.value := parseExpression()
                stmt.kind := ForRangeStatement
            elseif acceptToken(token: tkRangeExclusive)
                stmt.lhs := stmt.value
                stmt.value := parseExpression()
                stmt.kind := ForRangeExclusiveStatement
            end

            stmt.block := parseBlock()
            expectToken(expected: tkEnd)

            return stmt
        elseif tk = tkImport
            stmt := Statement(kind: ImportStatement)
            stmt.identifierList.push(value: expectIdentifier())
            while acceptToken(token: tkComma)
                stmt.identifierList.push(value: expectIdentifier())
            end
            expectToken(expected: tkFrom)
            expectToken(expected: tkStringConstant)
            stmt.identifier := tokeniser.value()
            return stmt
        end

        tokeniser.putback()

        value := parseExpression()

        if acceptToken(token: tkAssign)
            stmt := Statement(kind: StatementKind.AssignStatement)
            stmt.value := parseExpression()
            stmt.lhs := value
            return stmt
        end

        stmt := Statement(kind: StatementKind.ExpressionStatement)
        stmt.value := value
        return stmt
    end

    public function parseBlock(): Statement[]
        const result: Statement[]

        var stmt: Statement? := parseStatement()
        while stmt <> nil
            result.push(value: stmt)
            stmt := parseStatement()
        end

        return result
    end

    function parseDefnArgument(): DefnArgument
        var isPublic := false
        if acceptToken(token: tkPublic)
            isPublic := true
        end
        const identifier := expectIdentifier()
        expectToken(expected: tkColon)
        const type := parseType()

        const arg := DefnArgument(identifier, type, isPublic)

        if acceptToken(token: tkAssign)
            arg.value := parseExpression()
        end

        return arg
    end

    function parseDefnArguments(): DefnArgument[]
        const result: DefnArgument[]
        if acceptToken(token: tkRightParen)
            return result
        end
        result.push(value: parseDefnArgument())
        while acceptToken(token: tkComma)
            result.push(value: parseDefnArgument())
        end
        expectToken(expected: tkRightParen)
        return result
    end

    function parseExpression: Expression
        var left := parseAndExpression()
        var tk := tokeniser.nextToken()
        while tk = tkOr
            left := Expression(kind: Or, left, right: parseAndExpression())
            tk := tokeniser.nextToken()
        end
        tokeniser.putback()
        return left
    end

    function parseAndExpression: Expression
        var left := parseComparisonExpression()
        var tk := tokeniser.nextToken()
        while tk = tkAnd
            left := Expression(kind: And, left, right: parseComparisonExpression())
            tk := tokeniser.nextToken()
        end
        tokeniser.putback()
        return left
    end

    function parseComparisonExpression: Expression
        var left := parseAddSub()
        var tk := tokeniser.nextToken()

        if tk = tkLessThan
            left := Expression(kind: LessThan, left, right: parseAddSub())
        elseif tk = tkLessThanEquals
            left := Expression(kind: LessThanEquals, left, right: parseAddSub())
        elseif tk = tkEquals
            left := Expression(kind: Equals, left, right: parseAddSub())
        elseif tk = tkNotEquals
            left := Expression(kind: NotEquals, left, right: parseAddSub())
        elseif tk = tkGreaterThan
            left := Expression(kind: GreaterThan, left, right: parseAddSub())
        elseif tk = tkGreaterThanEquals
            left := Expression(kind: GreaterThanEquals, left, right: parseAddSub())
        else
            tokeniser.putback()
        end
        return left
    end

    function parseAddSub: Expression
        var left := parseTerm()
        var tk := tokeniser.nextToken()
        while tk = tkPlus or tk = tkMinus
            if tk = tkPlus
                left := Expression(kind: Add, left, right: parseTerm())
            else
                left := Expression(kind: Subtract, left, right: parseTerm())
            end
            tk := tokeniser.nextToken()
        end
        tokeniser.putback()
        return left
    end

    function parseTerm: Expression
        var left := parseFactor()
        var tk := tokeniser.nextToken()
        while tk = tkTimes or tk = tkSlash
            if tk = tkTimes
                left := Expression(kind: Multiply, left, right: parseFactor())
            else
                left := Expression(kind: Divide, left, right: parseFactor())
            end
            tk := tokeniser.nextToken()
        end
        tokeniser.putback()
        return left
    end

    function parseFactor: Expression
        const tk := tokeniser.nextToken()
        var e:Expression?
        var p:Expression?
        var ident: string?
        if tk = tkIntConstant
            e := Expression(kind: IntConstant, tokeniser)
            e.value := tokeniser.value()
        elseif tk = tkDoubleConstant
            e := Expression(kind: DoubleConstant, tokeniser)
            e.value := tokeniser.value()
        elseif tk = tkStringConstant
            e := Expression(kind: StringConstant, tokeniser)
            e.value := tokeniser.value()
        elseif tk = tkIdentifier
            e := Expression(kind: Identifier, tokeniser)
            e.value := tokeniser.value()
        elseif tk = tkLeftParen
            e := parseExpression()
            expectToken(expected: tkRightParen)
        elseif tk = tkNot
            e := Expression(kind: Not, left: parseFactor())
        elseif tk = tkMinus
            e := Expression(kind: Negate, left: parseFactor())
        elseif tk = tkBoolConstant
            e := Expression(kind: BoolConstant)
            e.value := tokeniser.value()
        elseif tk = tkString
            e := Expression(kind: IntrinsicType)
            e.value := tokeniser.value()
        elseif tk = tkNil
            e := Expression(kind: NilConstant)
            e.value := tokeniser.value()
        elseif tk = tkLeftBracket
            expectToken(expected: tkRightBracket)
            e := Expression(kind: ArrayConstant)
        else
            panic(message: "Unexpected token: " + tokeniser.value())
            e:= Expression(kind: Invalid)
        end

        while true
            if acceptToken(token: tkDot)
                e := Expression(kind: Dot, left: e)
                e.line := tokeniser.line
                e.value := expectIdentifier()
                e.tokenPos := tokeniser.start()
                e.tokenLength := tokeniser.tokenLength()
            elseif acceptToken(token: tkOptDot)
                e := Expression(kind: OptDot, left: e)
                e.line := tokeniser.line
                e.value := expectIdentifier()
            elseif acceptToken(token: tkBang)
                e := Expression(kind: Bang, left: e)
            elseif acceptToken(token: tkLeftParen)
                e:= Expression(kind: Invoke, left: e)
                e.line := tokeniser.line
                if not acceptToken(token: tkRightParen)
                    repeat
                        ident := expectIdentifier()
                        if acceptToken(token: tkColon)
                            e.identifiers.push(value: ident)
                            e.indexes.push(value: parseExpression())
                        else
                            p := Expression(kind: Identifier)
                            p.value := ident
                            e.indexes.push(value: p)
                            e.identifiers.push(value: ident)
                        end
                    until not acceptToken(token: tkComma)
                    expectToken(expected: tkRightParen) 
                end
            elseif acceptToken(token: tkLeftBracket)
                e:= Expression(kind: Index, left: e)
                e.line := tokeniser.line
                if not acceptToken(token: tkRightBracket)

                    e.indexes.push(value: parseExpression())

                    if acceptToken(token: tkRangeInclusive)
                        e.kind := Slice
                    elseif acceptToken(token: tkRangeExclusive)
                        e.kind := Slice
                        e.indexes.push(value: parseExpression())
                    else
                        while acceptToken(token: tkComma)
                            e.indexes.push(value: parseExpression())
                        end
                    end
                    expectToken(expected: tkRightBracket)
                end
            else
                return e!
            end
        end

        return e!
    end
end
