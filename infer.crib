import World, Statement, StatementKind, ParsedType, TypeKind, Expression, ExpressionKind, DefnArgument from "./parser"

public enum IdentifierOriginKind(Field, Parameter, Class, Enum, Function, PrivateField)

public class IdentifierOrigin(public kind: IdentifierOriginKind, public type: ParsedType, public isMutable: bool, public context: Statement? := nil)
end

function cloneScope(scope: IdentifierOrigin[string]?): IdentifierOrigin[string]
    const newScope: IdentifierOrigin[string]
    if scope = nil
        return newScope
    end
    for key in scope.keys()
        newScope[key] := scope[key]!
    end
    return newScope
end 

function getBlockDefinitions(block: Statement[], outerScope: IdentifierOrigin[string]?): IdentifierOrigin[string]
    const scope := cloneScope(scope: outerScope)

    for stmt in block
        if stmt.kind = FunctionStatement
            scope[stmt.identifier!] := IdentifierOrigin(kind: IdentifierOriginKind.Function, type: ParsedType(kind: functionType, stmt), isMutable: false)
        elseif stmt.kind = ClassStatement
            scope[stmt.identifier!] := IdentifierOrigin(kind: IdentifierOriginKind.Class, type: ParsedType(kind: classType, stmt), isMutable: false)
        elseif stmt.kind = EnumStatement
            scope[stmt.identifier!] := IdentifierOrigin(kind: IdentifierOriginKind.Enum, type: ParsedType(kind: enumDefinitionType, stmt), isMutable: false)
        end
    end

    return scope
end

public function inferAsync(world: World)
    function spread(sources: Statement[]): Statement[]
        const nextGen: Statement[]

        for fn in sources
            for ref in fn.referencedBy.keys()
                if not ref.async
                    ref.async := true
                    nextGen.push(value: ref)
                end
            end
        end

        return nextGen
    end

    var nextGen := spread(sources: world.allCode.filter(where: it.async))
    while nextGen.length > 0
        nextGen := spread(sources: nextGen)
    end
end

function inferPublicInterface(module: Statement[], outerScope: IdentifierOrigin[string]): IdentifierOrigin[string]
    const scope := getBlockDefinitions(block: module, outerScope)

    for stmt in module
        if stmt.kind = ClassStatement or stmt.kind = FunctionStatement
            inferClassFunctionInterface(scope, stmt)
        elseif stmt.kind = LetStatement or stmt.kind = ConstStatement
            if stmt.type.kind = unknownType
                stmt.type := inferPublicExpressionType(expr: stmt.value!, scope)
            elseif stmt.type <> nil
                resolveType(type: stmt.type, scope)
            end
        end
    end

    return scope
end

function effectiveType(type: ParsedType) : ParsedType
    if type.kind = pointerType
        return effectiveType(type: type.ref!)
    end
    return type
end

public function applyScopeToBlock(block: Statement[], scope: IdentifierOrigin[string], owner: Statement^)
    const forClass := owner.kind = ClassStatement
    for stmt in block
        if stmt.kind = ClassStatement or stmt.kind = FunctionStatement
            inferClassFunctionInterface(scope, stmt)
        end
    end

    for stmt in block
        if stmt.kind = ClassStatement or stmt.kind = FunctionStatement
            const innerScope := cloneScope(scope)
            if owner <> nil
                owner.contextKind := FrameContext
            end
            if stmt.kind = FunctionStatement
                stmt.contextKind := StackContext
            else
                stmt.contextKind := FrameContext
            end
            stmt.parentContext := owner
            stmt.compileIdentifier := owner.compileIdentifier + "_" + stmt.identifier!

            for arg in stmt.defnArguments
                if stmt.kind = ClassStatement
                    if arg.isPublic
                        innerScope[arg.identifier] := IdentifierOrigin(kind: Field, type: arg.type, isMutable: true, context: stmt)
                    else
                        innerScope[arg.identifier] := IdentifierOrigin(kind: PrivateField, type: arg.type, isMutable: true, context: stmt)
                    end
                else
                    innerScope[arg.identifier] := IdentifierOrigin(kind: Parameter, type: arg.type, isMutable: true, context: stmt)
                end
            end
            inferBlock(block: stmt.block, outerScope: innerScope, owner: stmt)
        elseif stmt.kind = LetStatement or stmt.kind = ConstStatement
            if stmt.value <> nil
                resolveType(type: stmt.type, scope)
                inferExpressionType(expr: stmt.value!, scope, impliedType: stmt.type, owner)
            end
            if stmt.type.kind = unknownType
                stmt.type := inferExpressionType(expr: stmt.value!, scope, owner)
                if stmt.type.kind = unknownType
                    panic(message: "Could not infer type of " + stmt.identifier!)
                end
            else
                resolveType(type: stmt.type, scope)
            end
            if forClass
                if stmt.isPublic
                    scope[stmt.identifier!] := IdentifierOrigin(kind: Field, type: stmt.type, isMutable: stmt.kind = LetStatement, context: owner)
                else
                    scope[stmt.identifier!] := IdentifierOrigin(kind: PrivateField, type: stmt.type, isMutable: stmt.kind = LetStatement, context: owner)
                end
            else
                scope[stmt.identifier!] := IdentifierOrigin(kind: Parameter, type: stmt.type, isMutable: stmt.kind = LetStatement, context: owner)
            end
        elseif stmt.kind = ReturnStatement
            if stmt.value <> nil
                stmt.value.type := inferExpressionType(expr: stmt.value!, scope, impliedType: owner.type, owner)
            end
        elseif stmt.kind = WhileStatement
            inferExpressionType(expr: stmt.value!, scope, owner)
            inferBlock(block: stmt.block, outerScope: scope, owner)
        elseif stmt.kind = RepeatStatement
            inferBlock(block: stmt.block, outerScope: scope, owner)
            inferExpressionType(expr: stmt.value!, scope, owner)
        elseif stmt.kind = ForStatement
            inferExpressionType(expr: stmt.value!, scope, owner)
            const sequenceType := effectiveType(type: stmt.value!.type)
            if sequenceType.kind <> arrayType
                panic(message: "For loop must iterate over an array")
            end
            const innerScope := cloneScope(scope)
            innerScope[stmt.identifier!] := IdentifierOrigin(kind: IdentifierOriginKind.Parameter, type: sequenceType.ref!, isMutable: true)
            inferBlock(block: stmt.block, outerScope: innerScope, owner)
        elseif stmt.kind = IfStatement
            inferExpressionType(expr: stmt.value!, scope, owner, owner)
            inferBlock(block: stmt.block, outerScope: scope, owner)
            for ei in stmt.elseIf
                inferExpressionType(expr: ei.value, scope, owner)
                inferBlock(block: ei.block, outerScope: scope, owner)
            end
            inferBlock(block: stmt.elseBlock!, outerScope: scope, owner)
        elseif stmt.kind = ExpressionStatement
            inferExpressionType(expr: stmt.value!, scope, owner)
        elseif stmt.kind = AssignStatement
            inferExpressionType(expr: stmt.lhs!, scope, owner)
            inferExpressionType(expr: stmt.value!, scope, impliedType: stmt.lhs!.type, owner)
        end
    end
end

function flattenObjectType(type: ParsedType): ParsedType
    if type.kind = pointerType or type.kind = nullableType
        return flattenObjectType(type: type.ref!)
    end
    return type
end

function inferPublicExpressionType(expr: Expression, scope: IdentifierOrigin[string]): ParsedType
    if expr.kind = IntConstant
        return ParsedType(kind: intType)
    elseif expr.kind = StringConstant
        return ParsedType(kind: stringType)
    elseif expr.kind = BoolConstant
        return ParsedType(kind: boolType)
    end
    return ParsedType(kind: unknownType)
end

function inferExpressionType(expr: Expression, scope: IdentifierOrigin[string], impliedType: ParsedType^? := nil, owner: Statement^): ParsedType
    var returnType: ParsedType?
    if expr.kind = Identifier
        if impliedType <> nil
            const implied := flattenObjectType(type: impliedType)
            if implied.kind = enumType
                const enumDef := implied.stmt!
                const enumValue := enumDef.identifierList.indexOf(value: expr.value!)
                if enumValue >= 0
                    expr.kind := IntConstant
                    expr.value := "" + enumValue
                    expr.type := ParsedType(kind: enumType, stmt: enumDef)
                    return expr.type
                end
            end
        end

        if scope.has(key: expr.value!)
            expr.origin := scope[expr.value!]!
            expr.type := expr.origin!.type

            if expr.type.kind = functionType or expr.type.kind = classType
                expr.type.stmt!.referencedBy[owner] := true
            end
        else
            panic(message: "Could not resolve identifier " + expr.value)
        end
    elseif expr.kind = IntConstant
        expr.type := ParsedType(kind: intType)
    elseif expr.kind = StringConstant
        expr.type := ParsedType(kind: stringType)
    elseif expr.kind = BoolConstant
        expr.type := ParsedType(kind: boolType)
    elseif expr.kind = Not
        inferExpressionType(expr: expr.left!, scope, owner)
        expr.type := ParsedType(kind: boolType)
    elseif expr.kind = Negate
        inferExpressionType(expr: expr.left!, scope, owner)
        expr.type := expr.left!.type
    elseif expr.kind = Take
        inferExpressionType(expr: expr.left!, scope, owner)
        expr.type := expr.left!.type
    elseif expr.kind = Equals or expr.kind = NotEquals
        const leftType := inferExpressionType(expr: expr.left!, scope, owner)
        inferExpressionType(expr: expr.right!, scope, impliedType: leftType, owner)
        expr.type := ParsedType(kind: boolType)
    elseif expr.kind = And or expr.kind = Or or expr.kind = LessThan or expr.kind = LessThanEquals or expr.kind = GreaterThan or expr.kind = GreaterThanEquals
        inferExpressionType(expr: expr.left!, scope, owner)
        inferExpressionType(expr: expr.right!, scope, owner)
        expr.type := ParsedType(kind: boolType)
    elseif expr.kind = Add
        inferExpressionType(expr: expr.left!, scope, owner)
        inferExpressionType(expr: expr.right!, scope, owner)
        if expr.left!.type.kind = intType and expr.right!.type.kind = intType
            expr.type := ParsedType(kind: intType)
        else
            expr.type := ParsedType(kind: stringType)
        end
    elseif expr.kind = Subtract or expr.kind = Multiply or expr.kind = Divide or expr.kind = Modulo
        inferExpressionType(expr: expr.left!, scope, owner)
        inferExpressionType(expr: expr.right!, scope, owner)
        expr.type := ParsedType(kind: intType)
    elseif expr.kind = Dot or expr.kind = OptDot
        const type := flattenObjectType(type: inferExpressionType(expr: expr.left!, scope, owner))
        if type.kind = objectType and type.stmt?.kind = ClassStatement
            expr.type := getFieldType(classDefinition: type.stmt, identifier: expr.value!)
        elseif type.kind = enumDefinitionType
            const enumStmt := type.stmt!
            if enumStmt.identifierList.indexOf(value: expr.value!) < 0
                panic(message: "Could not find enum value " + expr.value!)
            end

            returnType := ParsedType(kind: enumType, stmt: type.stmt)
            returnType.identifier := type.stmt!.identifier
            expr.type := returnType
        elseif type.kind = stringType and expr.value = "length"
            expr.type := ParsedType(kind: intType)
        elseif type.kind = arrayType and expr.value = "length"
            expr.type := ParsedType(kind: intType)
        elseif type.kind = arrayType and expr.value = "push"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: voidType)
            fakeStmt.defnArguments.push(value: DefnArgument(identifier: "value", type: type.ref!, isPublic: false))
            fakeStmt.compileIdentifier := "__array_push"
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = arrayType and expr.value = "indexOf"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: intType)
            fakeStmt.defnArguments.push(value: DefnArgument(identifier: "value", type: type.ref!, isPublic: false))
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = arrayType and expr.value = "filter"
            const callbackTypeStmt := Statement(kind: FunctionStatement)
            callbackTypeStmt.identifier := "where"
            callbackTypeStmt.type := ParsedType(kind: boolType)
            callbackTypeStmt.defnArguments.push(value: DefnArgument(identifier: "it", type: type.ref!, isPublic: false))
            const callbackType := ParsedType(kind: functionType, stmt: callbackTypeStmt)

            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := type
            fakeStmt.identifier := "filter"
            fakeStmt.defnArguments.push(value: DefnArgument(identifier: "where", type: callbackType, isPublic: false))

            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = arrayType and expr.value = "join"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: stringType)
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = mapType and expr.value = "has"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: boolType)
            fakeStmt.defnArguments.push(value: DefnArgument(identifier: "key", type: type.ref!, isPublic: false))
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = mapType and expr.value = "delete"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: voidType)
            fakeStmt.defnArguments.push(value: DefnArgument(identifier: "key", type: type.ref!, isPublic: false))
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        elseif type.kind = mapType and expr.value = "keys"
            const fakeStmt := Statement(kind: FunctionStatement)
            fakeStmt.type := ParsedType(kind: arrayType, ref: type.mapKeyRef!)
            expr.type := ParsedType(kind: functionType, stmt: fakeStmt)
        else
            panic(message: "Not an object type")
        end
    elseif expr.kind = Bang
        inferExpressionType(expr: expr.left!, scope, owner)
        if expr.left!.type.kind = nullableType
            expr.type := expr.left!.type.ref!
        else
            expr.type := expr.left!.type
        end
    elseif expr.kind = Invoke
        const type := inferExpressionType(expr: expr.left!, scope, owner)
        if type.kind = functionType
            expr.type := type.stmt!.type!
            if expr.type.kind = unknownType
                panic(message: "Could not infer return type of function")
            end
            type.stmt!.referencedBy[owner] := true
        elseif type.kind = classType
            returnType := ParsedType(kind: objectType, stmt: type.stmt)
            returnType.identifier := type.stmt!.identifier
            expr.type := returnType
            type.stmt!.referencedBy[owner] := true
        else
            panic(message: "Not a function or class type")
        end
        const functionDecl := type.stmt!
        if functionDecl.async
            owner.async := true
        end
        
        const argumentDefs := functionDecl.defnArguments
        var aidx := 0
        while aidx < expr.indexes.length
            const arg := expr.indexes[aidx]
            const name := expr.identifiers[aidx]

            var didx := 0
            var found := false
            while didx < argumentDefs.length
                const defn := argumentDefs[didx]
                if defn.identifier = name
                    found := true

                    if defn.type.kind = functionType
                        const lambdaScope := cloneScope(scope)
                        const scopeArgs := defn.type.stmt!.defnArguments
                        for scopeArg in scopeArgs
                            lambdaScope[scopeArg.identifier] := IdentifierOrigin(kind: Parameter, type:scopeArg.type, isMutable: true) 
                        end

                        inferExpressionType(expr: arg, scope: lambdaScope, owner)
                    else
                        inferExpressionType(expr: arg, scope, impliedType: defn.type, owner)
                    end
                end
                didx := didx + 1
            end

            aidx := aidx + 1
        end
    elseif expr.kind = Slice
        const type := flattenObjectType(type: inferExpressionType(expr: expr.left!, scope, owner))
        if type.kind = arrayType
            expr.type := type
        elseif type.kind = stringType
            expr.type := type
        else
            panic(message: "Not an array type")
        end
        for arg in expr.indexes
            inferExpressionType(expr: arg, scope, owner)
        end
    elseif expr.kind = ArrayConstant
        expr.type := ParsedType(kind: arrayInitType)
    elseif expr.kind = Index
        const type := flattenObjectType(type: inferExpressionType(expr: expr.left!, scope, owner))
        if type.kind = arrayType or type.kind = mapType
            expr.type := type.ref!
        elseif type.kind = stringType
            expr.type := ParsedType(kind: intType)
        else
            panic(message: "Not an array type")
        end
        for arg in expr.indexes
            inferExpressionType(expr: arg, scope, owner)
        end
    end
    if expr.type.kind = unknownType and expr.kind <> NilConstant
        panic(message: "Could not infer type of expression")
    end
    return expr.type
end

function getFieldType(classDefinition: Statement, identifier: string): ParsedType
    for arg in classDefinition.defnArguments
        if arg.identifier = identifier
            return arg.type
        end
    end
    for stmt in classDefinition.block
        if stmt.kind = ConstStatement or stmt.kind = LetStatement
            if stmt.identifier = identifier
                return stmt.type
            end
        elseif stmt.kind = FunctionStatement
            if stmt.identifier = identifier
                return ParsedType(kind: functionType, stmt)
            end
        end
    end
    panic(message: "Field " + identifier + " not found in class " + classDefinition.identifier)
    return ParsedType(kind: invalidType)
end

public function inferBlock(block: Statement[], outerScope: IdentifierOrigin[string], owner: Statement^): IdentifierOrigin[string]
    const scope := getBlockDefinitions(block, outerScope)

    applyScopeToBlock(block, scope, owner)

    return scope
end

function inferClassFunctionInterface(scope: IdentifierOrigin[string], stmt: Statement)
    resolveType(type: stmt.type, scope)
    for arg in stmt.defnArguments
        resolveType(type: arg.type, scope)
    end
    if stmt.kind = ClassStatement
        inferPublicInterface(module: stmt.block, outerScope: scope)
    end
end

function resolveType(type: ParsedType, scope: IdentifierOrigin[string])
    if type.kind = objectType
        if scope.has(key: type.identifier!)
            const resolvedType := scope[type.identifier!]!.type
            if resolvedType.kind = classType
                type.stmt := resolvedType.stmt
            elseif resolvedType.kind = enumDefinitionType
                type.stmt := resolvedType.stmt
                type.kind := enumType
            else
                panic(message: "Not a class or enum type " + type.identifier)
            end
        else
            panic(message: "Could not resolve type " + type.identifier)
        end
    elseif type.kind = nullableType or type.kind = pointerType
        resolveType(type: type.ref!, scope)
    elseif type.kind = arrayType
        resolveType(type: type.ref!, scope)
    elseif type.kind = mapType
        resolveType(type: type.ref!, scope)
        resolveType(type: type.mapKeyRef!, scope)
    end
end
