import Statement, StatementKind, ParsedType, TypeKind, Expression, ExpressionKind from ./parser

function getBlockDefinitions(block: Statement[], outerScope: StringMap?): StringMap
    const scope := StringMap(init: outerScope)

    for stmt of block
        if stmt.kind = StatementKind.FunctionStatement
            scope.set(key: stmt.identifier!, value: ParsedType(kind: TypeKind.functionType, ref: nil, stmt))
        elseif stmt.kind = StatementKind.ClassStatement
            scope.set(key: stmt.identifier!, value: ParsedType(kind: TypeKind.classType, ref: nil, stmt))
        elseif stmt.kind = StatementKind.EnumStatement
            scope.set(key: stmt.identifier!, value: ParsedType(kind: TypeKind.enumDefinitionType, ref: nil, stmt))
        end
    end

    return scope
end

function inferPublicInterface(module: Statement[], outerScope: StringMap): StringMap
    const scope := getBlockDefinitions(block: module, outerScope)

    for stmt of module
        if stmt.kind = StatementKind.ImportStatement
            importScope(scope, stmt)
        end
    end

    for stmt of module
        if stmt.kind = StatementKind.ClassStatement or stmt.kind = StatementKind.FunctionStatement
            inferClassFunctionInterface(scope, stmt)
        elseif stmt.kind = StatementKind.LetStatement or stmt.kind = StatementKind.ConstStatement
            if stmt.type <> nil
                resolveType(type: stmt.type, scope)
            end
        end
    end

    return scope
end

public function applyScopeToBlock(block: Statement[], scope: StringMap)
    for stmt of block
        if stmt.kind = StatementKind.ClassStatement or stmt.kind = StatementKind.FunctionStatement
            inferClassFunctionInterface(scope, stmt)

            const innerScope := StringMap(init: scope)
            for arg of stmt.defnArguments
                innerScope.set(key: arg.identifier, value: arg.type)
            end
            inferBlock(block: stmt.block, scope: innerScope)
        elseif stmt.kind = StatementKind.LetStatement or stmt.kind = StatementKind.ConstStatement
            if stmt.type.kind = TypeKind.unknownType
                stmt.type := inferExpressionType(expr: stmt.value!, scope)
            else
                resolveType(type: stmt.type, scope)
            end
        end
    end
end

function flattenObjectType(type: ParsedType): ParsedType
    if type.kind = TypeKind.pointerType or type.kind = TypeKind.nullableType
        return flattenObjectType(type: type.ref!)
    end
    return type
end

function inferExpressionType(expr: Expression, scope: StringMap): ParsedType
    let returnType: ParsedType?
    if expr.kind = ExpressionKind.Identifier
        if scope.has(key: expr.value!)
            return scope.get(key: expr.value!)!
        else
            panic(message: "Could not resolve identifier " + expr.value)
        end
    elseif expr.kind = ExpressionKind.IntConstant
        return ParsedType(kind: TypeKind.intType, ref: nil, stmt: nil)
    elseif expr.kind = ExpressionKind.StringConstant
        return ParsedType(kind: TypeKind.stringType, ref: nil, stmt: nil)
    elseif expr.kind = ExpressionKind.Dot
        const type := flattenObjectType(type: inferExpressionType(expr: expr.left!, scope))
        if type.kind = TypeKind.objectType and type.stmt?.kind = StatementKind.ClassStatement
            return getFieldType(classDefinition: type.stmt, identifier: expr.value!)
        elseif type.kind = TypeKind.enumDefinitionType
            return ParsedType(kind: TypeKind.enumType, ref: nil, stmt: type.stmt)
        elseif type.kind = TypeKind.stringType and expr.value = "length"
            return ParsedType(kind: TypeKind.intType, ref: nil, stmt: nil)
        elseif type.kind = TypeKind.arrayType and expr.value = "length"
            return ParsedType(kind: TypeKind.intType, ref: nil, stmt: nil)
        else
            panic(message: "Not an object type")
        end

    elseif expr.kind = ExpressionKind.Invoke
        const type := inferExpressionType(expr: expr.left!, scope)
        if type.kind = TypeKind.functionType
            return type.stmt.type
        elseif type.kind = TypeKind.classType
            returnType := ParsedType(kind: TypeKind.objectType, ref: nil, stmt: type.stmt)
            returnType.identifier := type.stmt.identifier
            return returnType
        else
            panic(message: "Not a function or class type")
        end   
    end
    return ParsedType(kind: TypeKind.unknownType, ref: nil, stmt: nil)
end

function getFieldType(classDefinition: Statement, identifier: string): ParsedType
    for arg of classDefinition.defnArguments
        if arg.identifier = identifier
            return arg.type
        end
    end
    for stmt of classDefinition.block
        if stmt.kind = StatementKind.ConstStatement or stmt.kind = StatementKind.LetStatement
            if stmt.identifier = identifier
                return stmt.type
            end
        elseif stmt.kind = StatementKind.FunctionStatement
            if stmt.identifier = identifier
                return ParsedType(kind: TypeKind.functionType, ref: nil, stmt)
            end
        end
    end
    panic(message: "Field " + identifier + " not found in class " + classDefinition.identifier)
    return ParsedType(kind: TypeKind.invalidType, ref: nil, stmt: nil)
end

public function inferBlock(block: Statement[], outerScope: StringMap): StringMap
    const scope := getBlockDefinitions(block, outerScope)

    for stmt of block
        if stmt.kind = StatementKind.ImportStatement
            importScope(scope, stmt)
        end
    end

    applyScopeToBlock(block, scope)

    return scope
end

function inferClassFunctionInterface(scope: StringMap, stmt: Statement)
    resolveType(type: stmt.type, scope)
    for arg of stmt.defnArguments
        resolveType(type: arg.type, scope)
    end
end

function resolveType(type: ParsedType, scope: StringMap)
    if type.kind = TypeKind.objectType
        if scope.has(key: type.identifier!)
            const resolvedType := scope.get(key: type.identifier!)
            if resolvedType.kind = TypeKind.classType or resolvedType.kind = TypeKind.enumDefinitionType
                type.stmt := resolvedType.stmt
            else
                panic(message: "Not a class or enum type " + type.identifier)
            end
        else
            panic(message: "Could not resolve type " + type.identifier)
        end
    elseif type.kind = TypeKind.nullableType or type.kind = TypeKind.pointerType
        resolveType(type: type.ref!, scope)
    elseif type.kind = TypeKind.arrayType
        resolveType(type: type.ref!, scope)
    end
end
